@page "/admin/pincer/{GroupId:int}/new-post"
@using Ganss.Xss
@using Markdig
@using Microsoft.EntityFrameworkCore
@using StartSch.Data
@using StartSch.Services

@rendermode InteractiveServer
@inject IServiceProvider Services
@inject IDbContextFactory<Db> DbFactory
@attribute [PincerGroupAdminRequirement]

@{
    var excerpt = string.IsNullOrWhiteSpace(_model.Excerpt)
        ? _textOnlySanitizer.Sanitize(Markdown.ToHtml(_model.Body))
        : _model.Excerpt;
    excerpt = excerpt.AsSpan().ToAndroidNotificationBody();
}

<div style="display: flex; gap: 32px">
    <div style="flex: 1">
        <h2>Új poszt</h2>

        <EditForm Model="_model" OnValidSubmit="Send" FormName="NewPost">

            <div>
                <label>
                    <span style="display: block">
                        Nyitás
                    </span>
                    <InputSelect @bind-Value="@_model.OpeningId">
                        @foreach (var opening in _openings)
                        {
                            <option value="@opening.Id">
                                @opening.Event.Title - @Utils.FormatDateRange(opening.Event.StartUtc, opening.Event.EndUtc)
                            </option>
                        }
                    </InputSelect>
                </label>
            </div>

            <div>
                <label>
                    <span style="display: block">
                        Cím
                    </span>
                    <InputText @bind-Value="@_model.Title"/>
                </label>
            </div>

            <div>
                <label>
                    <span style="display: block">
                        Tartalom
                        <small>(Markdown/HTML)</small>
                    </span>
                    <InputTextArea
                        style="min-height: 256px; font-family: monospace"
                        @bind-Value="@_model.Body"/>
                </label>
            </div>

            <div>
                <label>
                    <span style="display: block">
                        Kivonat <small>(opcionális)</small>
                    </span>
                    <InputTextArea
                        style="min-height: 128px; font-family: inherit"
                        @bind-Value="@_model.Excerpt"/>
                </label>
            </div>

            <FilledButton type="submit" style="margin-top: 16px">
                Közzététel
            </FilledButton>
            <TextButton type="submit" style="margin-top: 16px">
                Mentés későbbre
            </TextButton>
        </EditForm>
    </div>

    <div style="
            background-color: var(--md-sys-color-surface-dim); border-radius: 48px; padding: 16px;
            flex: 1; align-self: flex-start;
            ">

        @* Home page post *@
        <div style="background-color: var(--md-sys-color-background); padding: 32px; border-radius: 32px">
            <article>
                <h2>@_model.Title</h2>
                <div class="tags">
                    <div>@_group?.PincerName</div>
                </div>
                @((MarkupString)_sanitizer.Sanitize(Markdown.ToHtml(_model.Body)))
            </article>
        </div>

        @* Open Android notification *@
        <div style="
                background-color: var(--md-sys-color-surface-container-high);
                border-radius: 28px;
                padding: 52px 22px 52px 52px;
                max-width: 400px;
                box-sizing: border-box;
                margin: 16px auto 0 auto;
                ">
            <h4 class="roboto-medium" style="margin: 0 128px 8px 0; font-size: 18px">
                @(_model.Title)
            </h4>
            <p class="roboto-regular"
               style="
                    color: var(--md-sys-color-on-surface-variant);
                    white-space: pre-wrap;
                    margin: 4px 0 0 0;
                    font-size: 15px;
                    max-height: 10lh;
                    overflow: hidden">
                @excerpt
            </p>
        </div>

    </div>
</div>

@code {
    private IEnumerable<Opening> _openings = [];
    private Group? _group;

    private readonly NewPostModel _model = new();
    private readonly HtmlSanitizer _sanitizer = new();
    private readonly HtmlSanitizer _textOnlySanitizer = new();

    public PincerNewPostPage()
    {
        _textOnlySanitizer.AllowedTags.Clear();
        _textOnlySanitizer.KeepChildNodes = true;
        _textOnlySanitizer.AllowedAttributes.Clear();
    }

    [Parameter] public int GroupId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using Db db = await DbFactory.CreateDbContextAsync();
        _group = await db.Groups.FindAsync(GroupId); // TODO: Handle group not found
        _openings = await db.Openings
            .Include(o => o.Event.Groups)
            .Where(o => o.Event.Groups.Any(g => g.Id == GroupId))
            .OrderByDescending(o => o.Event.StartUtc)
            .AsNoTrackingWithIdentityResolution()
            .ToListAsync();
    }

    private async Task Send()
    {
        await using var scope = Services.CreateAsyncScope();
        var pushService = scope.ServiceProvider.GetRequiredService<PushService>();
        var excerpt = string.IsNullOrWhiteSpace(_model.Excerpt)
            ? _textOnlySanitizer.Sanitize(Markdown.ToHtml(_model.Body))
            : _model.Excerpt;

        await using Db db = await DbFactory.CreateDbContextAsync();
        db.Attach(_group!);
        Post post = new()
        {
            Title = _model.Title,
            Excerpt = excerpt,
            Body = _model.Body,
            Groups = { _group! }
        };
        db.Posts.Add(post);
        await db.SaveChangesAsync();

        await pushService.SendNotification(
            new(_model.Title, excerpt.AsSpan().ToAndroidNotificationBody(), null, "https://start.sch.bme.hu"),
            [
                $"push.pincér.hírek.{_group!.PincerName}",
            ]
        );
    }

    public class NewPostModel
    {
        [MinLength(5)] public string Title { get; set; } = "";
        [MinLength(5)] public string Excerpt { get; set; } = "";
        [MinLength(5)] public string Body { get; set; } = "";
        public int? OpeningId { get; set; }
    }

}